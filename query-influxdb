
t1 =
    from(bucket: "sonarqube_kpi")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r["_measurement"] == "bugs")
    |> filter(fn: (r) => r["_field"] == "bugs")
    |> sort()
    |> yield(name: "sort")

t2 =
    from(bucket: "sonarqube_kpi")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r["_measurement"] == "ncloc")
    |> filter(fn: (r) => r["_field"] == "ncloc")
    |> sort()
    |> yield(name: "sort")

join(tables: {t1: t1, t2: t2}, on: ["_time"])



###
from(bucket: "sonarqube_kpi")
    |> range(start: -24h, stop: now())
    |> filter(fn: (r) => r._measurement == "bugs" and r._field == "bugs")
    |> group(columns: ["project_key"])
    |> last()
    |> group()
    |> keep(columns: ["_value", "project_key", "project_name"])


###
t1 =
    from(bucket: "sonarqube_kpi")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r["_measurement"] == "bugs")
    |> filter(fn: (r) => r["_field"] == "bugs")

t2 =
    from(bucket: "sonarqube_kpi")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r["_measurement"] == "ncloc")
    |> filter(fn: (r) => r["_field"] == "ncloc")

join(tables: {t1: t1, t2: t2}, on: ["project_key"])


###
from(bucket: "sonarqube_kpi")
    |> range(start: -24h, stop: now())
    |> filter(fn: (r) => r._measurement == "bugs" and r._field == "bugs")
    |> map(fn: (r) => ({ r with _field: if r._field == "bugs" then "số bug" else "" }) )
    |> group(columns: ["project_key"])
    |> keep(columns: ["_value", "_field", "project_name", "_time"])

###
from(bucket: "sonarqube_kpi")
    |> range(start: -24h, stop: now())
    |> filter(fn: (r) => r["_measurement"] == "bugs" or r["_measurement"] == "code_smells" or r["_measurement"] == "ncloc" or r["_measurement"] == "sqale_index")
    |> filter(fn: (r) => r["_field"] == "bugs" or r["_field"] == "code_smells" or r["_field"] == "ncloc" or r["_field"] == "sqale_index")
    |> filter(fn: (r) => r["project_key"] == "Test")
    |> map(fn: (r) => ({ r with _field: if r._field == "bugs" then "số  bug" else if r._field == "ncloc" then "số  dòng code" else if r._field == "code_smells" then "số  code lởm" else if r._field == "sqale_index" then "nợ kỹ thuật" else "" }) )
    |> group(columns: ["project_key"])
    |> keep(columns: ["_value", "_field", "project_name", "_time"])


###
from(bucket: "sonarqube_kpi")
    |> range(start: -24h, stop: now())
    |> filter(fn: (r) => r["_measurement"] == "bugs" or r["_measurement"] == "code_smells" or r["_measurement"] == "ncloc" or r["_measurement"] == "sqale_index")
    |> filter(fn: (r) => r["_field"] == "bugs" or r["_field"] == "code_smells" or r["_field"] == "ncloc" or r["_field"] == "sqale_index")
    |> filter(fn: (r) => r["project_key"] == "Test")
    |> map(fn: (r) => ({ r with _field: if r._field == "bugs" then "số  bug" else if r._field == "ncloc" then "số  dòng code" else if r._field == "code_smells" then "số  code lởm" else if r._field == "sqale_index" then "nợ kỹ thuật" else "" }) )
    |> map(fn: (r) => ({ r with _field: if r._field == "sqale_index" then r._value == int(v: r._value) % 60 else r._value ==""}))
    |> group(columns: ["project_key"])
    |> keep(columns: ["_value", "_field", "project_name", "project_key", "_time"])

###
t1 =
    from(bucket: "sonarqube_kpi")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r["_measurement"] == "bugs")
    |> filter(fn: (r) => r["_field"] == "bugs")

t2 =
    from(bucket: "sonarqube_kpi")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r["_measurement"] == "ncloc")
    |> filter(fn: (r) => r["_field"] == "ncloc")

join(tables: {t1: t1, t2: t2}, on: ["project_key"])
  |> pivot(rowKey:["project_key"], columnKey: ["_field_t1"], valueColumn: "_value_t1")